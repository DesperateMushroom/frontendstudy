/*
    css3中的变形属性：transform，改变元素的样式（
                      优势： 开启了硬件加速，比传统的样式改变性能流畅一些
                      特点： 基于transform变形的元素，相当于脱离了文档流
                            对其余元素的位置不会产生影响
                    + scale(N) 缩放 (沿着z轴缩放） scaleX，scaleY
                    + translate(X,Y) 位移   translate3d(X,Y,Z）
                    + rotate(Ndeg) 旋转N度  rotateX / rotateY
                    + skew（Ndeg) 倾斜N度   
                    + matrix 矩阵变形       matrix3d
*/

/* .taylor{
    display: block;
    margin: 10px; */

    /* transform: scale(1.5) skew(45deg); */
    /* transform: translate(200px,200px); */
    /* transform: translate(200px,200px) rotate(90deg); */
    /* margin-top: 200px;
    margin-left: 200px;
    margin不会脱离文档流，所以会把后面的元素挤下去 */
/* } */

/* 
.box{
    margin: 10px;
    background-color: lightblue;
    width: 500px;
    height: 500px;
} */


/* css3中的过度动画：transition */
/*  给元素设置过渡效果，当元素的样式在某种情况下发生改变了
    不是立即改变，而是按照指定的效果慢慢的改变，从而实现动画效果
        + transition-property: 设置过渡的样式属性（哪些样式改变会执行过渡效果）
                               默认是all，元素所有的样式改变都会执行过渡效果
        + transition-duration: 动画运行的时间 ms/s
        + transition-timing-function: 运行的方式  linear(默认匀速), ease, 
                                      ease-in, ease-out, ease-in-out, cubic-bezier
        + transition-delay: 设置延迟时间，默认0s（立即执行）
*/
/* .taylor{
    display: block;
    margin: 20px auto;
 */
    /* transition: all 1s linear 0s; */
/*     transition: .2s;
} */
/* .taylor:hover{
    transform: scale(1.1);
    -webkit-filter: grayscale(1);
}
 */


 /* css3中的帧动画: animation */
 /* 1. 制作动作的轨迹（每一帧元素的样式）@keyframes
        @keyframes 动画名{
            0% 或者 from {第一帧的样式}
            ...
            50% {中间某帧的样式}
            ...
            100% 或者 to {最后一帧的样式}
        }
    2. 播放动画（按照轨迹运动） animation
        + animation-name: 动画名
        + animation-duration: 播放的时间
        + animation-timing-function: 运动方式：ease默认
        + animation-delay: 延迟时间，默认0s
        + animation-iteration-count: 播放次数，默认1.infinite无限次播放
        + animation-fill-mode: 控制运动状态
            - forwards: animation动画，元素运动完，默认会返回第一帧所在的位置
                        如果设置了这个属性，则运动完停留在最后一帧的位置
            - backwards: 在动画设置延迟时间的情况下， 我们让元素在第一帧位置等待运行
            - both：同时具备以上两个特点
 */
/* 
@keyframes AAA {
    0%{
        transform: translate(100px,0);
    }

    25%{
        transform: translate(600px,0);
    }

    50%{
        transform: translate(400px, 20px);
    }
    100%{
        transform: translate(400px,400px);
    }
}


 .taylor:hover{
    display: block;
    animation: AAA 1s linear 1s backwards;
 } */


 